{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Transit Transit is a Kotlin Multiplatform library for consuming public transport schedule data from providers. So far, it offers API bindings for the following popular journey planner systems: HAFAS HCI ( HAFAS Client Interface ) HAFAS HAPI ( HAFAS REST or OpenAPI ) EFA ( Elektronische Fahrplanauskunft ) TRIAS ( Travellors Realtime Information Advisory Standard ) What does this solve Because of the heterogeneous landscape of journey planner systems in use, consuming these sort of APIs is hard. Furthermore, if this is to be done across multiple systems in a unified way, things get especially complicated. The biggest pain points usually are vendors' continued efforts to keep service documentation behind the curtain, so it becomes a tedious process of reverse-engineering to get a working implementation of even a tiny subset of the possible features. Since public transport schedule data has uses on a range of platforms (Web, Mobile etc.), there exist numerous implementations for the different platforms. Some of them are merely half-baked and vary in the supported feature sets. Most importantly, collecting public knowledge of closed-source APIs in a decentralized way, e.g. distributed over platforms and repositories, does everything but expedite the process and the end result of generated documentation is subpar. Kotlin Multiplatform plays the crucial role here. It is a game changer in that it now allows to write API implementations once centrally, but then build them for several platform targets so they can be used in the domain where the actual applications live. Credits The following pioneer projects laid the necessary groundwork for this project. It wouldn't exist if not for these and the people working on them. public-transport-enabler hafas-client BahnhofsAbfahrten","title":"Transit"},{"location":"#transit","text":"Transit is a Kotlin Multiplatform library for consuming public transport schedule data from providers. So far, it offers API bindings for the following popular journey planner systems: HAFAS HCI ( HAFAS Client Interface ) HAFAS HAPI ( HAFAS REST or OpenAPI ) EFA ( Elektronische Fahrplanauskunft ) TRIAS ( Travellors Realtime Information Advisory Standard )","title":"Transit"},{"location":"#what-does-this-solve","text":"Because of the heterogeneous landscape of journey planner systems in use, consuming these sort of APIs is hard. Furthermore, if this is to be done across multiple systems in a unified way, things get especially complicated. The biggest pain points usually are vendors' continued efforts to keep service documentation behind the curtain, so it becomes a tedious process of reverse-engineering to get a working implementation of even a tiny subset of the possible features. Since public transport schedule data has uses on a range of platforms (Web, Mobile etc.), there exist numerous implementations for the different platforms. Some of them are merely half-baked and vary in the supported feature sets. Most importantly, collecting public knowledge of closed-source APIs in a decentralized way, e.g. distributed over platforms and repositories, does everything but expedite the process and the end result of generated documentation is subpar. Kotlin Multiplatform plays the crucial role here. It is a game changer in that it now allows to write API implementations once centrally, but then build them for several platform targets so they can be used in the domain where the actual applications live.","title":"What does this solve"},{"location":"#credits","text":"The following pioneer projects laid the necessary groundwork for this project. It wouldn't exist if not for these and the people working on them. public-transport-enabler hafas-client BahnhofsAbfahrten","title":"Credits"},{"location":"getting-started/","text":"NOTE: This is a draft, nothing's been published yet! Using Gradle Add the maven central repository: repositories { mavenCentral() } For snapshot builds, add the snapshots repository: repositories { maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\") } Artifacts Get artifacts (multiplatform modules): // Get all artifacts implementation(\"io.github.jlnstrk.transit:transit:0.1.0-SNAPSHOT\") // Get just HCI implementation(\"io.github.jlnstrk.transit:api-hci:0.1.0-SNAPSHOT\") // Get HCI with interop implementation(\"io.github.jlnstrk.transit:interop-hci:0.1.0-SNAPSHOT\") // Get just HAPI implementation(\"io.github.jlnstrk.transit:api-hapi:0.1.0-SNAPSHOT\") // Get HAPI with interop implementation(\"io.github.jlnstrk.transit:interop-hapi:0.1.0-SNAPSHOT\") // Get just EFA implementation(\"io.github.jlnstrk.transit:api-efa:0.1.0-SNAPSHOT\") // Get EFA with interop implementation(\"io.github.jlnstrk.transit:interop-efa:0.1.0-SNAPSHOT\") // Get just TRIAS implementation(\"io.github.jlnstrk.transit:api-trias:0.1.0-SNAPSHOT\") // Get TRIAS with interop implementation(\"io.github.jlnstrk.transit:interop-trias:0.1.0-SNAPSHOT\")","title":"Getting started"},{"location":"getting-started/#using-gradle","text":"Add the maven central repository: repositories { mavenCentral() } For snapshot builds, add the snapshots repository: repositories { maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\") }","title":"Using Gradle"},{"location":"getting-started/#artifacts","text":"Get artifacts (multiplatform modules): // Get all artifacts implementation(\"io.github.jlnstrk.transit:transit:0.1.0-SNAPSHOT\") // Get just HCI implementation(\"io.github.jlnstrk.transit:api-hci:0.1.0-SNAPSHOT\") // Get HCI with interop implementation(\"io.github.jlnstrk.transit:interop-hci:0.1.0-SNAPSHOT\") // Get just HAPI implementation(\"io.github.jlnstrk.transit:api-hapi:0.1.0-SNAPSHOT\") // Get HAPI with interop implementation(\"io.github.jlnstrk.transit:interop-hapi:0.1.0-SNAPSHOT\") // Get just EFA implementation(\"io.github.jlnstrk.transit:api-efa:0.1.0-SNAPSHOT\") // Get EFA with interop implementation(\"io.github.jlnstrk.transit:interop-efa:0.1.0-SNAPSHOT\") // Get just TRIAS implementation(\"io.github.jlnstrk.transit:api-trias:0.1.0-SNAPSHOT\") // Get TRIAS with interop implementation(\"io.github.jlnstrk.transit:interop-trias:0.1.0-SNAPSHOT\")","title":"Artifacts"},{"location":"interop/","text":"title: Interop","title":"Interop"},{"location":"interop/#title-interop","text":"","title":"title: Interop"},{"location":"api/efa/","text":"EFA ( Elektronische Fahrplanauskunft )","title":"EFA"},{"location":"api/efa/#efa-elektronische-fahrplanauskunft","text":"","title":"EFA (Elektronische Fahrplanauskunft)"},{"location":"api/hapi/","text":"HAFAS-HAPI ( HAFAS REST or OpenAPI )","title":"HAFAS-HAPI"},{"location":"api/hapi/#hafas-hapi-hafas-rest-or-openapi","text":"","title":"HAFAS-HAPI (HAFAS REST or OpenAPI)"},{"location":"api/hci/","text":"HAFAS-HCI ( HAFAS Client Interface )","title":"HAFAS-HCI"},{"location":"api/hci/#hafas-hci-hafas-client-interface","text":"","title":"HAFAS-HCI (HAFAS Client Interface)"},{"location":"api/trias/","text":"TRIAS ( Elektronische Fahrplanauskunft )","title":"TRIAS"},{"location":"api/trias/#trias-elektronische-fahrplanauskunft","text":"","title":"TRIAS (Elektronische Fahrplanauskunft)"}]}