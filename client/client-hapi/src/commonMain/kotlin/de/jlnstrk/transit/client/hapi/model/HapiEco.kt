package de.jlnstrk.transit.client.hapi.model

import de.jlnstrk.transit.client.hafas.HapiXsd
import kotlinx.serialization.Serializable

@HapiXsd("1.29")
@Serializable
public data class HapiEco(
    /** CO2 emission in kg */
    public val co2: Double,
    /** CO2 emission, in operation only in kg */
    public val do2f: Double,
    /** Particulate matter emission (25).
     * This value includes possible particulate matter emissions occurring when generating the energy used
     * for the vehicle during the trip. For example, electric cars will still have a non-zero
     * particulate matter emission although the vehicle doesn't emit anything but the electric energy used
     * by the vehicle might be generated from coal power plants and those created emissions during energy generation.
     * Unit is g. */
    public val part: Double,
    /** Particulate matter emission (10).
     * This value includes possible particulate matter emissions occurring when generating the energy used
     * for the vehicle during the trip. For example, electric cars will still have a non-zero
     * particulate matter emission although the vehicle doesn't emit anything but the electric energy used
     * by the vehicle might be generated from coal power plants and those created emissions during energy generation.
     * Unit is g. */
    public val part10: Double,
    /** Particulate matter emission per vehicle (25).
     * This value contains only the emission generated by the vehicle on this trip.
     * Emissions which were generated during generation of the energy used by the vehicle are ignored by this value.
     * Unit is g. */
    public val partV: Double,
    /** NMHC emission in g */
    public val nmhc: Double,
    /** NOX emission in g */
    public val nox: Double,
    /** PRIME emission, calculated in l petrol */
    public val prime: Double,
    /** PRIMEF emission, in operation only, calculated in l petrol */
    public val primef: Double,
    /** SO2 emission in g */
    public val so2: Double,
    /** environmental impact points 06 */
    public val ubp: Double,
    /** Distance the emitting carrier is used in meter. */
    public val dist: Int = -1,
    /** Type of emitting carrier. Values are PUT: public transport, PFT: public flight transport,
     * PRT: private transport */
    public val type: Type = Type.PUT,
) {

    @Serializable
    public enum class Type {
        PUT,
        PFT,
        PRT,
    }
}